{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sys",
				"SystemExit	class"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\"\"\"\nCookie Clicker Simulator\n\"\"\"\n\nimport simpleplot\n\n# Used to increase the timeout, if necessary\nimport codeskulptor\ncodeskulptor.set_timeout(20)\n\nimport poc_clicker_provided as provided\n\n# Constants\nSIM_TIME = 10000000000.0\n\n\nclass ClickerState:\n\n    \"\"\"\n    Simple class to keep track of the game state.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def __str__(self):\n        \"\"\"\n        Return human readable state\n        \"\"\"\n        return \"not yet implemented\"\n\n    def get_cookies(self):\n        \"\"\"\n        Return current number of cookies \n        (not total number of cookies)\n\n        Should return a float\n        \"\"\"\n        return 0.0\n\n    def get_cps(self):\n        \"\"\"\n        Get current CPS\n\n        Should return a float\n        \"\"\"\n        return 0.0\n\n    def get_time(self):\n        \"\"\"\n        Get current time\n\n        Should return a float\n        \"\"\"\n        return 0.0\n\n    def get_history(self):\n        \"\"\"\n        Return history list\n\n        History list should be a list of tuples of the form:\n        (time, item, cost of item, total cookies)\n\n        For example: [(0.0, None, 0.0, 0.0)]\n\n        Should return a copy of any internal data structures,\n        so that they will not be modified outside of the class.\n        \"\"\"\n        return []\n\n    def time_until(self, cookies):\n        \"\"\"\n        Return time until you have the given number of cookies\n        (could be 0.0 if you already have enough cookies)\n\n        Should return a float with no fractional part\n        \"\"\"\n        return 0.0\n\n    def wait(self, time):\n        \"\"\"\n        Wait for given amount of time and update state\n\n        Should do nothing if time <= 0.0\n        \"\"\"\n        pass\n\n    def buy_item(self, item_name, cost, additional_cps):\n        \"\"\"\n        Buy an item and update state\n\n        Should do nothing if you cannot afford the item\n        \"\"\"\n        pass\n\n\ndef simulate_clicker(build_info, duration, strategy):\n    \"\"\"\n    Function to run a Cookie Clicker game for the given\n    duration with the given strategy.  Returns a ClickerState\n    object corresponding to the final state of the game.\n    \"\"\"\n\n    # Replace with your code\n    return ClickerState()\n\n\ndef strategy_cursor_broken(cookies, cps, history, time_left, build_info):\n    \"\"\"\n    Always pick Cursor!\n\n    Note that this simplistic (and broken) strategy does not properly\n    check whether it can actually buy a Cursor in the time left.  Your\n    simulate_clicker function must be able to deal with such broken\n    strategies.  Further, your strategy functions must correctly check\n    if you can buy the item in the time left and return None if you\n    can't.\n    \"\"\"\n    return \"Cursor\"\n\n\ndef strategy_none(cookies, cps, history, time_left, build_info):\n    \"\"\"\n    Always return None\n\n    This is a pointless strategy that will never buy anything, but\n    that you can use to help debug your simulate_clicker function.\n    \"\"\"\n    return None\n\n\ndef strategy_cheap(cookies, cps, history, time_left, build_info):\n    \"\"\"\n    Always buy the cheapest item you can afford in the time left.\n    \"\"\"\n    return None\n\n\ndef strategy_expensive(cookies, cps, history, time_left, build_info):\n    \"\"\"\n    Always buy the most expensive item you can afford in the time left.\n    \"\"\"\n    return None\n\n\ndef strategy_best(cookies, cps, history, time_left, build_info):\n    \"\"\"\n    The best strategy that you are able to implement.\n    \"\"\"\n    return None\n\n\ndef run_strategy(strategy_name, time, strategy):\n    \"\"\"\n    Run a simulation for the given time with one strategy.\n    \"\"\"\n    state = simulate_clicker(provided.BuildInfo(), time, strategy)\n    print strategy_name, \":\", state\n\n    # Plot total cookies over time\n\n    # Uncomment out the lines below to see a plot of total cookies vs. time\n    # Be sure to allow popups, if you do want to see it\n\n    # history = state.get_history()\n    # history = [(item[0], item[3]) for item in history]\n    # simpleplot.plot_lines(strategy_name, 1000, 400, 'Time', 'Total Cookies', [history], True)\n\n\ndef run():\n    \"\"\"\n    Run the simulator.\n    \"\"\"\n    run_strategy(\"Cursor\", SIM_TIME, strategy_cursor_broken)\n\n    # Add calls to run_strategy to run additional strategies\n    # run_strategy(\"Cheap\", SIM_TIME, strategy_cheap)\n    # run_strategy(\"Expensive\", SIM_TIME, strategy_expensive)\n    # run_strategy(\"Best\", SIM_TIME, strategy_best)\n\nrun()\n",
			"file": "week5/cookie_clicker.py",
			"file_size": 4448,
			"file_write_time": 130883801230000000,
			"settings":
			{
				"buffer_size": 4379,
				"line_ending": "Unix",
				"name": "\"\"\""
			}
		},
		{
			"file": "week5/greedy_boss.py",
			"settings":
			{
				"buffer_size": 3446,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "/Users/Rafeh/Library/Application Support/Sublime Text 3/Packages/User/Glue.sublime-settings",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/ChessTastic/Library/Application Support/Sublime Text 3/Packages/anaconda/Anaconda.sublime-settings",
			"settings":
			{
				"buffer_size": 16946,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python 3/Python3.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/Python 3/Python3.sublime-build",
					""
				]
			],
			[
				"Packages/Python 3/Python3.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "te",
		"selected_items":
		[
			[
				"te",
				"Terminal: Open"
			],
			[
				"python",
				"Tmpl: Create python"
			],
			[
				"tm",
				"Tmpl: Create python"
			],
			[
				"tmpl",
				"Tmpl: Create python"
			],
			[
				"anaconda",
				"Anaconda: Set Python interpreter"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"",
				"Anaconda: Set Python interpreter"
			],
			[
				"glue",
				"Glue - Launch"
			],
			[
				"git",
				"Git: Diff"
			],
			[
				"git branch",
				"Git: Checkout New Branch"
			],
			[
				"git chec",
				"Git: Checkout"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git quc",
				"Git: Quick Commit"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"git commit",
				"Git: Quick Commit"
			],
			[
				"git add",
				"Git: Quick Add"
			],
			[
				"c",
				"Anaconda: McCabe complexity check"
			],
			[
				"b",
				"Build With: Python3"
			],
			[
				"comm",
				"Anaconda: McCabe complexity check"
			],
			[
				"buid",
				"Build With: Python3"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"print(5)",
			"print 5",
			"ls",
			"print(5)",
			"print 5",
			"print(5)",
			"for i in range(5):",
			"sys.version_info",
			"print(sys.version)",
			"import sys",
			"python version",
			"print(5)",
			"print 5",
			"x"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/ChessTastic/Dropbox/github/python-programs/coursera/poc1"
	],
	"file_history":
	[
		"/Users/ChessTastic/Dropbox/github/python-programs/coursera/poc1/monty_hall.py",
		"/Users/Rafeh/Library/Application Support/Sublime Text 3/Packages/SublimeTmpl/SublimeTmpl.sublime-settings",
		"/Users/Rafeh/Library/Application Support/Sublime Text 3/Packages/SublimeTmpl/Main.sublime-menu",
		"/Users/Rafeh/untitled",
		"/Users/Rafeh/Library/Application Support/Sublime Text 3/Packages/User/SublimeTmpl.sublime-settings",
		"/Users/Rafeh/Library/Application Support/Sublime Text 3/Packages/Glue/Glue.sublime-settings",
		"/Users/Rafeh/Library/Application Support/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"tenzin_ate_a_banana",
			"bro",
			"porn",
			"list",
			"1",
			"interpreter"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "week5/cookie_clicker.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4379,
						"regions":
						{
						},
						"selection":
						[
							[
								388,
								388
							]
						],
						"settings":
						{
							"auto_name": "\"\"\"",
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "week5/greedy_boss.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3446,
						"regions":
						{
						},
						"selection":
						[
							[
								119,
								170
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 77.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/Rafeh/Library/Application Support/Sublime Text 3/Packages/User/Glue.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/ChessTastic/Library/Application Support/Sublime Text 3/Packages/anaconda/Anaconda.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16946,
						"regions":
						{
						},
						"selection":
						[
							[
								7809,
								7809
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 3265.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git-checkout":
	{
		"height": 112.0
	},
	"output.git-commit":
	{
		"height": 112.0
	},
	"output.git-push":
	{
		"height": 112.0
	},
	"pinned_build_system": "",
	"project": "poc1.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Dropbox/github/python-programs/coursera/poc1/monty_hall.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
